diff --git a/GUI.cpp b/GUI.cpp
index 6af2312..d0369e7 100644
--- a/GUI.cpp
+++ b/GUI.cpp
@@ -1464,6 +1464,11 @@ void GUI::enterApp(ActionID_t app) {
   case GUI_APP_EDITWIFI:
     runningApp = new EditNetworkApp(*screen, state, NULL, header, footer);
     break;
+#ifdef LORA_MESSAGING
+  case GUI_APP_EDITLORA:
+    runningApp = new EditLoRaApp(*screen, state, header, footer);
+    break;
+#endif
   case GUI_APP_TIME_CONFIG:
     runningApp = new TimeConfigApp(*screen, state, header, footer);
     break;
@@ -5361,6 +5366,379 @@ void EditNetworkApp::redrawScreen(bool redrawAll) {
   screenInited = true;
 }
 
+// - - - - - - - - - - - - - - - - - - - - - - - - - - - -  EditLoRa app  - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+
+#ifdef LORA_MESSAGING
+EditLoRaApp::EditLoRaApp(LCD& lcd, ControlState& state, HeaderWidget* header, FooterWidget* footer)
+  : WindowedApp(lcd, state, header, footer), FocusableApp(5), ini(Storage::ConfigsFile) {
+  log_d("EditLoRaApp");
+
+  if (ini.load() || ini.restore()) {
+    if (ini.isEmpty() || !ini[0].hasKey("v") || strcmp(ini[0]["v"], "1")) {
+      log_d("unknown version or corrupt \"%s\" file", ini.filename());
+    }
+  } else {
+    ini[0]["desc"] = "WiPhone general configs";
+    ini[0]["v"] = "1";
+  }
+  IF_LOG(VERBOSE)
+  ini.show();
+
+  if (!ini.hasSection("lora")) {
+    log_e("adding section `lora`");
+    ini.addSection("lora");
+    ini["lora"]["lora_freq"] = "868.0";
+  }
+
+  // Create and arrange general widgets
+  header->setTitle("LoRa settings");
+  footer->setButtons("Save", "Clear");
+
+  clearRect = new RectWidget(0, header->height(), lcd.width(), lcd.height() - header->height() - footer->height(), WP_COLOR_1);
+
+  uint16_t yOff = header->height() + 5;
+
+  // Add form
+
+  // TODO: display device id/version
+  //lora.getVersion()
+
+  // Frequency
+  frequencyLabel = new LabelWidget(0, yOff, lcd.width(), 25, "Frequency", WP_ACCENT_1, WP_COLOR_1, fonts[AKROBAT_BOLD_18], LabelWidget::LEFT_TO_RIGHT, 8);
+  yOff += frequencyLabel->height();
+
+  frequencySelect = new ChoiceWidget(0, yOff, lcd.width(), 35);
+  frequencySelect->addChoice("US (915MHz)");
+  frequencySelect->addChoice("EU (868MHz)");
+  //this->addLabelInput(yOff, frequencyLabel, frequencySelect, "Frequency:", 50);
+
+  // TODO: get from config
+  frequencySelect->setValue(0);
+
+  yOff += frequencySelect->height();
+
+  // Modem config presets (as per suggestion)
+  modemConfigLabel = new LabelWidget(0, yOff, lcd.width(), 25, "Modem config", WP_ACCENT_1, WP_COLOR_1, fonts[AKROBAT_BOLD_18], LabelWidget::LEFT_TO_RIGHT, 8);
+  yOff += modemConfigLabel->height();
+
+  modemConfigSelect = new ChoiceWidget(0, yOff, lcd.width(), 35);
+  // Note that the settings are tied to the processEvent update!
+  // Bw = 125 kHz,    Cr = 4/5, Sf = 128chips/symbol, CRC on. Default medium range.
+  modemConfigSelect->addChoice("Default medium range");
+  // Bw = 500 kHz,    Cr = 4/5, Sf = 128chips/symbol, CRC on. Fast+short range.
+  modemConfigSelect->addChoice("Fast+short range");
+  // Bw = 31.25 kHz,  Cr = 4/8, Sf = 512chips/symbol, CRC on. Slow+long range.
+  modemConfigSelect->addChoice("Slow+long range A");
+  // Bw = 125 kHz,    Cr = 4/8, Sf = 4096chips/symbol, low data rate, CRC on. Slow+long range.
+  // TODO: set low data rate?
+  modemConfigSelect->addChoice("Slow+long range B");
+  // Bw = 125 kHz,    Cr = 4/5, Sf = 2048chips/symbol, CRC on. Slow+long range.
+  modemConfigSelect->addChoice("Slow+long range C");
+  modemConfigSelect->addChoice("Custom");
+
+  // TODO: determine from bandwidth, coding rate, spreading factor, CRC
+  modemConfigSelect->setValue(0);
+
+  yOff += modemConfigSelect->height();
+
+  // Bandwidth select (recommend >=62.5)
+  bandwidthLabel = new LabelWidget(0, yOff, lcd.width(), 25, "Modem config", WP_ACCENT_1, WP_COLOR_1, fonts[AKROBAT_BOLD_18], LabelWidget::LEFT_TO_RIGHT, 8);
+  yOff += bandwidthLabel->height();
+
+  //  setSignalBandwidth	(	long 	sbw	)	
+  //  higher means more throughput
+  bandwidthSelect = new ChoiceWidget(0, yOff, lcd.width(), 35);
+  // Note that the settings are tied to the processEvent update!
+  bandwidthSelect->addChoice("7.8kHz");
+  bandwidthSelect->addChoice("10.4kHz");
+  bandwidthSelect->addChoice("15.6kHz");
+  bandwidthSelect->addChoice("20.8kHz");
+  bandwidthSelect->addChoice("31.25kHz");
+  bandwidthSelect->addChoice("41.7kHz");
+  bandwidthSelect->addChoice("62.5kHz");
+  bandwidthSelect->addChoice("125kHz");
+  bandwidthSelect->addChoice("250kHz");
+  bandwidthSelect->addChoice("500kHz");
+
+  // TODO: get from config
+  bandwidthSelect->setValue(0);
+
+  yOff += bandwidthSelect->height();
+
+  //  setCodingRate4 5-8
+  codingRateLabel = new LabelWidget(0, yOff, lcd.width(), 25, "Modem config", WP_ACCENT_1, WP_COLOR_1, fonts[AKROBAT_BOLD_18], LabelWidget::LEFT_TO_RIGHT, 8);
+  yOff += codingRateLabel->height();
+
+  //  higher means more overhead
+  codingRateSelect = new ChoiceWidget(0, yOff, lcd.width(), 35);
+  // Note that the settings are tied to the processEvent update!
+  codingRateSelect->addChoice("1.25"); // 4/5
+  codingRateSelect->addChoice("1.5");
+  codingRateSelect->addChoice("1.75");
+  codingRateSelect->addChoice("2"); // 4/8
+
+  // TODO: get from config
+  codingRateSelect->setValue(0);
+
+  yOff += codingRateSelect->height();
+
+  //  setSpreadingFactor() -> higher means lower data rate, better robustness
+  spreadingFactorLabel = new LabelWidget(0, yOff, lcd.width(), 25, "Modem config", WP_ACCENT_1, WP_COLOR_1, fonts[AKROBAT_BOLD_18], LabelWidget::LEFT_TO_RIGHT, 8);
+  yOff += spreadingFactorLabel->height();
+
+  // TODO: 6 needs header implicit mode, 
+  spreadingFactorSelect = new ChoiceWidget(0, yOff, lcd.width(), 35);
+  // Note that the settings are tied to the processEvent update!
+  spreadingFactorSelect->addChoice("64cps"); // 6
+  spreadingFactorSelect->addChoice("128cps");
+  spreadingFactorSelect->addChoice("256cps");
+  spreadingFactorSelect->addChoice("512cps");
+  spreadingFactorSelect->addChoice("1024cps");
+  spreadingFactorSelect->addChoice("2048cps");
+  spreadingFactorSelect->addChoice("4096cps"); // 12
+
+  // TODO: get from config
+  spreadingFactorSelect->setValue(0);
+
+  yOff += spreadingFactorSelect->height();
+
+  // CRC setting
+  //TODO: YesNoWidget
+  //this->addInlineLabelYesNo(yOff, labelWidth, dimmingLabel, dimmingChoice, "CRC");
+  crcLabel = new LabelWidget(0, yOff, lcd.width(), 25, "Modem config", WP_ACCENT_1, WP_COLOR_1, fonts[AKROBAT_BOLD_18], LabelWidget::LEFT_TO_RIGHT, 8);
+  yOff += crcLabel->height();
+
+  crcSelect = new ChoiceWidget(0, yOff, lcd.width(), 35);
+  // Note that the settings are tied to the processEvent update!
+  crcSelect->addChoice("Off");
+  crcSelect->addChoice("On");
+
+  // TODO: get from config
+  crcSelect->setValue(1);
+
+  yOff += crcSelect->height();
+
+  // Preamble length: 6 to 65535, default 8
+  // Where the preamble length is not known, or can vary, the
+  // maximum preamble length should be programmed on the receiver side
+  // TODO
+  addLabelSlider(yOff, preambleLabel, preambleSlider, "Preamble", 6, 65535, NULL, 1);
+
+  // frequency: 915, 868
+  //  setFrequency (float centre)
+
+  // setModemRegisters see https://hackaday.io/project/27791/instructions
+  // ModemConfigChoice (common data rates) https://www.airspayce.com/mikem/arduino/RadioHead/classRH__RF95.html#ab9605810c11c025758ea91b2813666e3
+
+  // power: sleep, idle, standby, synthesizer, receive, transmit -> 1056,27:         //allDigitalWrite(ENABLE_DAUGHTER_33V, HIGH);
+  //  void 	setModeIdle ()
+  //  void 	setModeRx ()
+  //  void 	setModeTx ()
+  //  bool 	sleep ()
+
+  //  uint8_t getDeviceVersion()
+
+  //  setPreambleLength(8)
+
+  const uint16_t spacing = 6; // 4
+  const uint16_t xOff = 2;
+  yOff += spacing*2;
+  lcd.setTextFont(fonts[OPENSANS_COND_BOLD_20]);
+  saveButton = new ButtonWidget(xOff, yOff, "Save");
+
+  // // Focusables
+  addFocusableWidget(frequencySelect);
+  addFocusableWidget(modemConfigSelect);
+  addFocusableWidget(bandwidthSelect);
+  addFocusableWidget(codingRateSelect);
+  addFocusableWidget(spreadingFactorSelect);
+  addFocusableWidget(crcSelect);
+  addFocusableWidget(preambleSlider);
+
+  addFocusableWidget(saveButton);
+
+  setFocus(frequencySelect);
+  screenInited = false;
+}
+
+EditLoRaApp::~EditLoRaApp() {
+  log_d("destroy EditLoRaApp");
+
+  ini.backup();
+
+  delete clearRect;
+  delete frequencyLabel;
+  delete frequencySelect;
+  delete modemConfigLabel;
+  delete modemConfigSelect;
+  delete bandwidthLabel;
+  delete bandwidthSelect;
+  delete codingRateLabel;
+  delete codingRateSelect;
+  delete spreadingFactorLabel;
+  delete spreadingFactorSelect;
+  delete crcLabel;
+  delete crcSelect;
+  delete preambleLabel;
+  delete preambleSlider;
+  delete saveButton;
+  
+}
+
+appEventResult EditLoRaApp::processEvent(EventType event) {
+  log_d("processEvent EditLoRaApp");
+
+  bool quit = false;
+
+  FocusableWidget* focusedWidget = getFocused();
+
+  if (event == WIPHONE_KEY_DOWN || event == WIPHONE_KEY_UP) {
+
+    // Change focus
+    nextFocus(event == WIPHONE_KEY_DOWN);
+
+  } else if (event == WIPHONE_KEY_END) {
+
+    quit = true;
+
+  } else if (LOGIC_BUTTON_OK(event) && focusedWidget == saveButton) {
+
+    // If "OK" was pressed while the saveButton is selected
+
+    // Save LoRa settings to NVS
+    log_d("save button pressed");
+
+    // Reflect changes to NanoINI
+    // int index = ini.query("s", frequencySelect->getText());       // "s" key stands for "SSID"
+    // if (index >= 0) {
+    //   ini[index]["p"] = passInput->getText();               // update password for a known network ("p" key")
+    // } else {
+    //   int i = ini.addSection();
+    //   ini[i]["s"] = frequencySelect->getText();
+    //   ini[i]["p"] = passInput->getText();
+    //   // TODO: maybe we don't always want to set the network as preferred?
+    //   ini.setUniqueFlag(i, "m");                            // "m" (for "main") is the preferred network flag
+    // }
+    float frequencies[] = {
+      915.0,
+      868.0,
+    };
+    lora.setFrequency( frequencies[frequencySelect->getValue()]);
+
+    uint8_t reg_1d = 0, reg_1e = 0, reg_26 = 0;
+    // TODO: determine flags
+    lora.setModemRegisters(reg_1d, reg_1e, reg_26);
+
+    // TODO
+    //lora.setPreambleLength( preambles[preambleSlider->getValue()]);
+
+    // Save to file, reload current network
+    {
+      ini.store();
+      log_d("saved lora settings");
+
+      log_d("rebooting");
+      ESP.restart();
+
+      // Quit from the app
+      quit = true;
+    }
+
+  } else if (focusedWidget != NULL) {
+
+    // Get the modemConfigSelect option
+    uint8_t modemConfigValue = modemConfigSelect->getValue();
+
+    // Pass button to whatever is focused
+    focusedWidget->processEvent(event);
+
+    // If bandwidthSelect, codingRateSelect, spreadingFactorSelect or crcSelect selected, update modemConfigSelect
+    if ( focusedWidget == bandwidthSelect ||
+          focusedWidget == codingRateSelect ||
+          focusedWidget == spreadingFactorSelect ||
+          focusedWidget == crcSelect
+        ) {
+      // TODO: Determine which modemconfig we selected
+      // For now, set it to custom
+      modemConfigSelect->setValue(5);
+
+    } else if (modemConfigValue != modemConfigSelect->getValue()) {
+      // If modemConfigSelect changed, update bandwidthSelect, codingRateSelect, spreadingFactorSelect and crcSelect
+      // Note that the settings are tied to the constructor values!
+      switch( modemConfigSelect->getValue() )
+      {
+        case 0:
+          // Bw = 125 kHz,    Cr = 4/5, Sf = 128chips/symbol, CRC on. Default medium range.
+          bandwidthSelect->setValue(7);
+          codingRateSelect->setValue(0);
+          spreadingFactorSelect->setValue(1);
+          crcSelect->setValue(1);
+          break;
+        case 1:
+          // Bw = 500 kHz,    Cr = 4/5, Sf = 128chips/symbol, CRC on. Fast+short range.
+          bandwidthSelect->setValue(8);
+          codingRateSelect->setValue(0);
+          spreadingFactorSelect->setValue(1);
+          crcSelect->setValue(1);
+          break;
+        case 2:
+          // Bw = 31.25 kHz,  Cr = 4/8, Sf = 512chips/symbol, CRC on. Slow+long range.
+          bandwidthSelect->setValue(4);
+          codingRateSelect->setValue(3);
+          spreadingFactorSelect->setValue(3);
+          crcSelect->setValue(1);
+          break;
+        case 3:
+          // Bw = 125 kHz,    Cr = 4/8, Sf = 4096chips/symbol, low data rate, CRC on. Slow+long range.
+          bandwidthSelect->setValue(7);
+          codingRateSelect->setValue(3);
+          spreadingFactorSelect->setValue(6);
+          crcSelect->setValue(1);
+          break;
+        case 4:
+          // Bw = 125 kHz,    Cr = 4/5, Sf = 2048chips/symbol, CRC on. Slow+long range.
+          bandwidthSelect->setValue(7);
+          codingRateSelect->setValue(0);
+          spreadingFactorSelect->setValue(5);
+          crcSelect->setValue(1);
+          break;
+      }
+    }
+  }
+
+
+  
+  
+  return quit ? EXIT_APP : REDRAW_ALL;
+}
+
+void EditLoRaApp::redrawScreen(bool redrawAll) {
+  log_d("redrawScreen EditLoRaApp");
+
+  if (!screenInited || redrawAll) {
+    ((GUIWidget*) clearRect)->redraw(lcd);
+    ((GUIWidget*) frequencyLabel)->redraw(lcd);
+    ((GUIWidget*) modemConfigLabel)->redraw(lcd);
+    ((GUIWidget*) bandwidthLabel)->redraw(lcd);
+    ((GUIWidget*) codingRateLabel)->redraw(lcd);
+    ((GUIWidget*) spreadingFactorLabel)->redraw(lcd);
+    ((GUIWidget*) crcLabel)->redraw(lcd);
+    ((GUIWidget*)  preambleLabel)->redraw(lcd);
+
+  }
+  ((GUIWidget*) frequencySelect)->redraw(lcd);
+  ((GUIWidget*) modemConfigSelect)->redraw(lcd);
+  ((GUIWidget*) bandwidthSelect)->redraw(lcd);
+  ((GUIWidget*) codingRateSelect)->redraw(lcd);
+  ((GUIWidget*) spreadingFactorSelect)->redraw(lcd);
+  ((GUIWidget*) crcSelect)->redraw(lcd);
+  ((GUIWidget*) preambleSlider)->redraw(lcd);
+  ((GUIWidget*) saveButton)->redraw(lcd);
+  
+  screenInited = true;
+}
+#endif
+
 // - - - - - - - - - - - - - - - - - - - - - - - - - - - -  TimeConfig app  - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
 TimeConfigApp::TimeConfigApp(LCD& lcd, ControlState& state, HeaderWidget* header, FooterWidget* footer)
@@ -5521,6 +5899,11 @@ ScreenConfigApp::ScreenConfigApp(LCD& lcd, ControlState& state, HeaderWidget* he
     ini.addSection("lock");
     ini["lock"]["lock_keyboard"] = "1";
   }
+  // if (!ini.hasSection("lora")) {
+  //   log_e("adding section `lora`");
+  //   ini.addSection("lora");
+  //   ini["lora"]["lora_freq"] = "868.0";
+  // }
 
   // Create and arrange general widgets
   header->setTitle("Screen settings");
@@ -5548,6 +5931,8 @@ ScreenConfigApp::ScreenConfigApp(LCD& lcd, ControlState& state, HeaderWidget* he
   this->addInlineLabelInput(yOff, labelWidth, sleepAfterLabel, sleepAfterInput, "Sleep after, s", 6, InputType::Numeric);
   yOff += 1;
   this->addInlineLabelYesNo(yOff, labelWidth, lockingLabel, lockingChoice, "Lock screen");
+  //yOff += 1;
+  //this->addInlineLabelInput(yOff, labelWidth, loraLabel, loraInput, "LoRa frequency, MHz", 868.0, InputType::Numeric);
   this->addRuler(yOff, ruler3, rulerOff);
 
   this->errorLabel = new LabelWidget(0, yOff, lcd.width(), 25, "", TFT_RED, WP_COLOR_1, fonts[AKROBAT_BOLD_18], LabelWidget::LEFT_TO_RIGHT, 8);
@@ -5555,6 +5940,7 @@ ScreenConfigApp::ScreenConfigApp(LCD& lcd, ControlState& state, HeaderWidget* he
 
   // Populate form
   lockingChoice->setValue((bool) ini["lock"].getIntValueSafe("lock_keyboard", 0));
+  //loraFreq->setValue((float) ini["lora"].getFloatValueSafe("lora_freq", 868.0));
   dimmingChoice->setValue((bool) ini["screen"].getIntValueSafe("dimming", 0));
   sleepingChoice->setValue((bool) ini["screen"].getIntValueSafe("sleeping", 0));
 
@@ -5564,6 +5950,8 @@ ScreenConfigApp::ScreenConfigApp(LCD& lcd, ControlState& state, HeaderWidget* he
   dimAfterInput->setText(ini["screen"].getValueSafe("dim_after_s", ""));
   sleepAfterInput->setText(ini["screen"].getValueSafe("sleep_after_s", ""));
 
+  //loraInput->setText(ini["lora"].getValueSafe("lora_freq", ""));
+
   // Preserve old values
   this->oldDimAfter = ini["screen"].getIntValueSafe("dim_after_s", 20);
   this->oldSleepAfter = ini["screen"].getIntValueSafe("sleep_after_s", 30);
@@ -5581,6 +5969,9 @@ ScreenConfigApp::ScreenConfigApp(LCD& lcd, ControlState& state, HeaderWidget* he
 
   this->addFocusableWidget(sleepingChoice);
   this->addFocusableWidget(sleepAfterInput);
+
+  // this->addFocusableWidget(loraInput);
+
   this->addFocusableWidget(lockingChoice);
 
   this->setFocus(brightLevelSlider);
@@ -5605,6 +5996,8 @@ ScreenConfigApp::~ScreenConfigApp() {
   delete dimAfterInput;
   delete sleepAfterLabel;
   delete sleepAfterInput;
+  // delete loraLabel;
+  // delete loraInput;
   delete errorLabel;
   delete ruler1;
   delete ruler2;
@@ -5714,6 +6107,7 @@ appEventResult ScreenConfigApp::processEvent(EventType event) {
       ini["screen"]["sleeping"] = (int32_t)sleepingChoice->getValue();
       ini["screen"]["dimming"] = (int32_t)dimmingChoice->getValue();
       ini["lock"]["lock_keyboard"] = (int32_t)lockingChoice->getValue();
+      //ini["lora"]["lora_freq"] = (float)loraFreq->getValue(); // TODO
       ini["screen"]["dim_level"] = (int32_t)dimLevelSlider->getValue();
       ini["screen"]["bright_level"] = (int32_t)brightLevelSlider->getValue();
       ini["screen"]["dim_after_s"] = dimAfter;
@@ -5794,6 +6188,7 @@ void ScreenConfigApp::redrawScreen(bool redrawAll) {
     ((GUIWidget*) sleepingLabel)->redraw(lcd);
     ((GUIWidget*) dimAfterLabel)->redraw(lcd);
     ((GUIWidget*) sleepAfterLabel)->redraw(lcd);
+    // ((GUIWidget*) loraLabel)->redraw(lcd);
   }
   ((GUIWidget*) lockingChoice)->refresh(lcd, redrawAll);
   ((GUIWidget*) dimmingChoice)->refresh(lcd, redrawAll);
@@ -5802,6 +6197,8 @@ void ScreenConfigApp::redrawScreen(bool redrawAll) {
   ((GUIWidget*) dimLevelSlider)->refresh(lcd, redrawAll);
   ((GUIWidget*) dimAfterInput)->refresh(lcd, redrawAll);
   ((GUIWidget*) sleepAfterInput)->refresh(lcd, redrawAll);
+  // ((GUIWidget*) loraInput)->refresh(lcd, redrawAll);
+
   ((GUIWidget*) errorLabel)->refresh(lcd, redrawAll);
 
   this->screenInited = true;
diff --git a/GUI.h b/GUI.h
index 39ec582..72852e4 100644
--- a/GUI.h
+++ b/GUI.h
@@ -30,6 +30,7 @@ governing permissions and limitations under the License.
 #include "Audio.h"
 #include "FairyMax.h"
 #include "ota.h"
+#include "lora.h"
 #include "driver/uart.h"
 #include "soc/uart_struct.h"
 
@@ -372,6 +373,7 @@ typedef enum ActionID : uint16_t {
   // Configs
   GUI_APP_EDITWIFI,
   GUI_APP_NETWORKS,
+  GUI_APP_EDITLORA,
   GUI_APP_AUDIO_CONFIG,
   GUI_APP_WIFI_CONFIG,
   GUI_APP_TIME_CONFIG,
@@ -2270,6 +2272,42 @@ protected:
   void setHeaderFooter();
 };
 
+class EditLoRaApp : public WindowedApp, FocusableApp {
+public:
+  EditLoRaApp(LCD& disp, ControlState& state, HeaderWidget* header, FooterWidget* footer);
+  virtual ~EditLoRaApp();
+
+  ActionID_t getId() {
+    return GUI_APP_EDITLORA;
+  };
+  appEventResult processEvent(EventType event);
+  void redrawScreen(bool redrawAll=false);
+
+protected:
+
+  CriticalFile ini;
+
+  // Widgets
+  RectWidget* clearRect;
+  LabelWidget* frequencyLabel;
+  ChoiceWidget* frequencySelect;
+  LabelWidget* modemConfigLabel;
+  ChoiceWidget* modemConfigSelect;
+  LabelWidget* bandwidthLabel;
+  ChoiceWidget* bandwidthSelect;
+  LabelWidget* codingRateLabel;
+  ChoiceWidget* codingRateSelect;
+  LabelWidget* spreadingFactorLabel;
+  ChoiceWidget* spreadingFactorSelect;
+  LabelWidget* crcLabel;
+  ChoiceWidget* crcSelect;
+  LabelWidget*  preambleLabel;
+  IntegerSliderWidget* preambleSlider;
+  ButtonWidget* saveButton;
+
+  bool screenInited;
+};
+
 class TimeConfigApp : public WindowedApp, FocusableApp {
 public:
   TimeConfigApp(LCD& disp, ControlState& state, HeaderWidget* header, FooterWidget* footer);
@@ -2432,7 +2470,7 @@ protected:
     { 17, 28, "Fonts demo", "", "", GUI_APP_FONT_DEMO },           // TODO: remove?
     { 18, 28, "Design demo", "", "", GUI_APP_DESIGN_DEMO },        // TODO: remove?
 #ifdef LED_BOARD
-    { 23, 28, "LED microphone", "", "", GUI_APP_LED_MIC },        // TODO: remove?
+    { 25, 28, "LED microphone", "", "", GUI_APP_LED_MIC },        // TODO: remove?
 #endif
 #ifdef USER_SERIAL
     { 24, 28, "Parcel delivery", "", "", GUI_APP_PARCEL },
@@ -2453,6 +2491,9 @@ protected:
     { 11, 5, "SIP accounts", "", "", GUI_APP_SIP_ACCOUNTS },
     { 12, 5, "Edit current network", "", "", GUI_APP_EDITWIFI },
     { 15, 5, "Scan WiFi networks", "", "", GUI_APP_NETWORKS },
+#ifdef LORA_MESSAGING
+    { 39, 5, "LoRa settings", "", "", GUI_APP_EDITLORA },
+#endif
     { 30, 5, "Audio settings", "", "", GUI_APP_AUDIO_CONFIG },
     { 33, 5, "Screen config", "", "", GUI_APP_SCREEN_CONFIG },
     { 32, 5, "Time offset", "", "", GUI_APP_TIME_CONFIG },
diff --git a/WiPhone.ino b/WiPhone.ino
index 22db01d..879db42 100644
--- a/WiPhone.ino
+++ b/WiPhone.ino
@@ -56,10 +56,6 @@ static Ota ota("");
 GUI gui;
 uint32_t chipId = 0;
 
-#ifdef LORA_MESSAGING
-static Lora lora;
-#endif
-
 // # # # # # # # # # # # # # # # # # # # # # # # # # # # #  PERIPHERALS  # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 
 SN7326 keypad(SN7326_I2C_ADDR_BASE, I2C_SDA_PIN, I2C_SCK_PIN);
diff --git a/lora.cpp b/lora.cpp
index 6b03536..3dff082 100644
--- a/lora.cpp
+++ b/lora.cpp
@@ -30,6 +30,10 @@ lora_message;
 extern uint32_t chipId;
 extern GUI gui;
 
+#ifdef LORA_MESSAGING
+Lora lora;
+#endif
+
 Lora::Lora() {
 
 }
@@ -43,13 +47,63 @@ void Lora::setup() {
   loraSPI->setPins(HSPI_MISO, HSPI_MOSI, HSPI_SCLK);
   pinMode(RFM95_RST, OUTPUT);
   rf95->init();
-  rf95->setFrequency(RF95_FREQ);
+
+
+  float freq = RF95_FREQ;
+  // Load phone configs
+  {
+    CriticalFile ini(Storage::ConfigsFile);
+    if ((ini.load() || ini.restore()) && !ini.isEmpty()) {
+      if (ini[0].hasKey("v") && !strcmp(ini[0]["v"], "1")) {    // check version of the file format
+        if ( ini.hasSection("lora") )
+          freq = ini["lora"].getFloatValueSafe("lora_freq", RF95_FREQ);
+      }
+    }
+  }
+  rf95->setFrequency(freq);
   rf95->setTxPower(23, false);
 
   log_v("Free memory after LoRa: %d %d", ESP.getFreeHeap(), heap_caps_get_free_size(MALLOC_CAP_32BIT));
   #endif
 }
 
+uint8_t Lora::getVersion() {
+  #ifdef LORA_MESSAGING
+  return rf95->getDeviceVersion();
+  #endif
+}
+
+void Lora::setFrequency(float centre) {
+  #ifdef LORA_MESSAGING
+  rf95->setFrequency(centre);
+  #endif
+}
+
+void Lora::setTxPower(int8_t power, bool useRFO) {
+  #ifdef LORA_MESSAGING
+  rf95->setTxPower(power, useRFO);
+  #endif
+}
+
+void Lora::setModemRegisters(uint8_t reg_1d, uint8_t reg_1e, uint8_t reg_26) {
+  #ifdef LORA_MESSAGING
+  const RH_RF95::ModemConfig config =
+  {
+    reg_1d,
+    reg_1e,
+    reg_26,
+  };
+
+  rf95->setModemRegisters(&config);
+  #endif
+}
+
+void Lora::setPreambleLength(uint16_t 	bytes) {
+  #ifdef LORA_MESSAGING
+  rf95->setPreambleLength(bytes);
+  #endif
+}
+
 TextMessage* Lora::parse_message(const uint8_t *message, uint8_t len) {
   /**
    * Message format:
@@ -90,6 +144,8 @@ bool Lora::loop() {
       if (msg != NULL) {
         gui.flash.messages.saveMessage(msg->message, msg->from, msg->to, true, ntpClock.getUnixTime());    // time == 0 for unknown real time
         delete msg;
+
+        //int lastSNR()
         return true;
       }
     } else {
diff --git a/lora.h b/lora.h
index a5c55e6..dd89725 100644
--- a/lora.h
+++ b/lora.h
@@ -28,6 +28,11 @@ public:
   Lora();
 
   void setup();
+  uint8_t getVersion();
+  void setFrequency(float centre);
+  void setTxPower(int8_t power, bool useRFO);
+  void setModemRegisters(uint8_t reg_1d, uint8_t reg_1e, uint8_t reg_26);
+  void setPreambleLength(uint16_t 	bytes);
 
 
   TextMessage* parse_message(const uint8_t *message, uint8_t len);
@@ -39,4 +44,9 @@ private:
   RH_RF95* rf95;
 };
 
+#ifdef LORA_MESSAGING
+extern Lora lora;
+#endif
+
+
 #endif
